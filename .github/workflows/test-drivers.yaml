name: CI - Test Drivers

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
    #branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      NEO4J_URL:
        description: 'Neo4J URL'
        required: false
        default: ''
      NEO4J_USER:
        description: 'Neo4J User'
        required: false
        default: 'neo4j'
      NEO4J_PASSWORD:
        description: 'Neo4J Password'
        required: false
        default: ''
      PYTHON_VERSION:
        description: 'Python version to use'
        required: false
        default: '3.11'  # Default Python version
      NEO4J_PYTHON_DRIVER_VERSION:
        description: 'Neo4J Python Driver version to use'
        required: false
        default: '5.27.0'  # Default Python version
      NEO4J_JAVA_DRIVER_VERSION:
        description: 'Neo4J Java Driver version to use'
        required: false
        default: '5.27.0'  # Default Neo4j driver versio
      NEO4J_JAVASCRIPT_DRIVER_VERSION:
        description: "Neo$j Javascript Driver version to use"
        required: false
        default: '5.27.0'
      BUILD_DOCKER_IMAGE:
        description: "Set to true if you want to build a new Docker image"
        required: false
        default: 'false'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-python:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Ceckout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            python-driver

      # Runs a single command using the runners shell
      - name: Test Python Drivers
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.PYTHON_VERSION }}  # Use the input for Python 

      - name: Run Tests
        env:
          NEO4J_URL: ${{ github.event.inputs.NEO4J_URL || secrets.NEO4J_URL }}
          NEO4J_USERNAME: ${{ github.event.inputs.NEO4J_USER || secrets.NEO4J_USER }}
          NEO4J_PASSWORD: ${{ github.event.inputs.NEO4J_PASSWORD || secrets.NEO4J_PASSWORD }}
        run: |
          echo "Testing connection to AuraDB instance: $NEO4J_URL"
          cd python-driver
          ls -lah
          if [ -z "${{ github.event.inputs.NEO4J_PYTHON_DRIVER_VERSION}}" ]; then 
            pip install python-dotenv neo4j==${{ github.event.inputs.NEO4J_PYTHON_DRIVER_VERSION }}
          else
            pip install python-dotenv neo4j
          fi
          python $PWD/main.py
    
  build-java:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            java-driver

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'  # Specify your Java version

      - name: Build and Run
        env:
          NEO4J_URL: "${{ secrets.NEO4J_URL }}"
          NEO4J_USERNAME: ${{ secrets.NEO4J_USER }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        run: |
          echo "Testing connection to AuraDB instance: $NEO4J_URL"
          cd java-driver
          mvn clean package -Dneo4j.driver.version=${{ github.event.inputs.NEO4J_JAVA_DRIVER_VERSION }}
          if [ -f target/java-driver-1.0-SNAPSHOT.jar ]; then
            java -jar target/java-driver-1.0-SNAPSHOT.jar
          else
            echo "JAR file not found!"
            exit 1
          fi

  build-node:
    name: Node ${{ matrix.node }} sample
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 16, 18, 20 ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            node-driver

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}        

      - name: Install dependencies and Run
        env:
          NEO4J_URL: ${{ secrets.NEO4J_URL }}
          NEO4J_USERNAME: ${{ secrets.NEO4J_USER }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        run: |
          echo "Testing connection to AuraDB instance: $NEO4J_URL"
          cd node-driver
          npm install neo4j-driver@${{github.event.inputs.NEO4J_JAVASCRIPT_DRIVER_VERSION}}
          node index.js

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-python,build-java,build-node]
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    if: ${{ github.event.input.BUILD_DOCKER_IMAGE == 'true'}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PKGS }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}